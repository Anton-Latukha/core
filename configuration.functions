# Consider breaking this out
core_uses core path

core_configuration_blacklist()
{
	core_variable_array_append _core_configuration_blacklisted "$@"
}

_core_configuration_load()
{
	local actualPath="$1"
	if [ ! -e "$actualPath" ]; then
		core_message INFO "Configuration file '$actualPath' does not exist; ignoring"
		return 0
	elif [ -f "$actualPath" ]; then
		if [ ! -r "$actualPath" ]; then
			core_message WARN "Configuration file '$actualPath' is not readable; ignoring"
			return 0
		fi
		if [ ! -s "$actualPath" ]; then
			core_message WARN "Configuration file '$actualPath' is empty; ignoring"
			return 0
		fi
		if [ -x "$actualPath" ]; then
			core_message WARN "Configuration file '$actualPath' is executable and should not be; ignoring"
			return 0
		fi
		. "$actualPath" || core_exitError "Could not load '$actualPath'"
	elif [ -d "$actualPath" ]; then
		if [ ! -r "$actualPath" ]; then
			core_message WARN "Configuration folder '$actualPath' is not readable; ignoring"
			return 0
		fi
		if [ ! -x "$actualPath" ]; then
			core_message WARN "Configuration folder '$actualPath' is not searchable; ignoring"
			return 0
		fi
		core_path_iterateOverFolderPath "$actualPath" _core_configuration_load
	else
		core_message WARN "Configuration path '$actualPath' resolves to neither a file or folder; ignoring"
		return 0
	fi
}

core_configuration_loadPath()
{
	local environmentVariable="$1"
	local folderOrFilePath="$2"
	
	if core_variable_array_contains _core_configuration_blacklisted "$environmentVariable"; then
		core_message WARN "Configuration path '\$$environmentVariable/$folderOrFilePath' is blacklisted"
		return 0
	fi

	local core_variable_indirectValue_result
	core_variable_indirectValue "$environmentVariable"
	local parentPath="$core_variable_indirectValue_result"
	
	if [ -z "$folderOrFilePath" ]; then
		local actualPath="$parentPath"
	else
		local actualPath="$parentPath"/"$folderOrFilePath"
	fi

	if core_variable_array_contains _core_configuration_alreadyLoaded "$actualPath"; then
		return 0
	fi
	
	core_variable_array_append _core_configuration_alreadyLoaded "$actualPath"
	
	_core_configuration_load "$actualPath"
}

core_configuration_defaultsBlacklistedEnvironmentVariables=''
core_configuration_load()
{	
	core_TODO Security checks to be done for any "${core_init_etcPath}" / '/etc' files
	# * They are not owned by root.
	# * They are not group writable.
	# * They are not world writable.
	# * They do not reside in a group writable directory.
	# * They do not reside in a world writable directory.
	# * They are not a symbolic link to a file residing in a group or world writable directory. 
	# Some of these needs can be accompolished by parsing  ls -a -l -L -n "$folderPath" | while IFS=' ' read -r permissions uid gid size month day file
	# Other might be best done by feature-checking stat (look at the lines of output)
	
	core_variable_array_initialise _core_configuration_alreadyLoaded
	
	core_configuration_loadPath core_init_etcPath "${core_libraryName}"/rc
	core_configuration_loadPath core_init_etcPath "${core_libraryName}"/rc.d
	
	core_configuration_loadPath core_init_etcPath "${global_ourName}"/rc
	core_configuration_loadPath core_init_etcPath "${global_ourName}"/rc.d
	
	core_configuration_loadPath HOME ."${core_libraryName}"/rc
	core_configuration_loadPath HOME ."${core_libraryName}"/rc.d
	
	core_configuration_loadPath ${core_libraryName}_RC ''
	core_configuration_loadPath ${core_libraryName}_RC_D ''
	
	core_configuration_loadPath HOME ."${global_ourName}"/rc
	core_configuration_loadPath HOME ."${global_ourName}"/rc.d
	
	core_configuration_loadPath ${global_ourName}_RC ''
	core_configuration_loadPath ${global_ourName}_RC_D ''
}

core_usesIn core compatibility
core_configuration_defaults()
{
	# A more sophisticated scheme would use locale -a and hunt for an UTF-8 locale, but language needs to be stable over multiple invocations if data is persistent
	# Can also be 'en_GB.UTF-8' or 'C' (but that's not unicode aware) or ?C.UTF-8?
	core_variable_setVariableIfUnset core_init_language 'en_US.UTF-8'
	core_variable_setVariableIfUnset core_init_verbosity 0
}
