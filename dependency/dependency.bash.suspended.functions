# This file is part of shellfire core. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/core/master/COPYRIGHT. No part of shellfire core, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of shellfire core. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/shellfire-dev/core/master/COPYRIGHT.


# NOT USED AT PRESENT

# There are several sources of commonly used tools in linux that provide 'core' utils with differing switches, etc.
# Despite POSIX, these are still quite incompatible.
# In rough popularity:-
# * GNU coreutils, findutils et al
# * Busybox
# * BSD userland (Mac OS X variant and *BSD variant, with slight differences between the *BSDs)
# * Toybox (up and coming)
# * Heirloom (http://heirloom.sourceforge.net/tools.html)
# * Proprietary Unix: Solaris, AIX and HP-UX (with everything else effectively now an also-ran)
# * Various other bits and bobs (see toybox)

# Also uname -s (part of coreutils, often at /bin/uname, so quite reliably present)
# See Gnu shtool http://www.gnu.org/software/shtool/ (slow)
# See Gnu config.guess http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob;f=config.guess;hb=HEAD (yuck)
# See getconf (part of IEEE Std 1003.1-2001 / Posix.1), part of libc-bin on Ubuntu, for other neat stuff
core_dependency_fallback !bash uname
core_dependency_determineOsFamily()
{
	# supported by bash, might be set externally or in configuration; the most reliable way to detect OS as it's built in
	if core_variable_isSet OSTYPE; then
		case "$OSTYPE" in
		
			cygwin)
				core_dependency_osFamily=cygwin
			;;
		
			# eg linux-gnu
			linux*)
				core_dependency_osFamily=linux
			;;
		
			# Part of MinGW, eg Git Bash and msysGit
			msys)
				core_dependency_osFamily=msys
			;;
		
			# darwin12 [Mountain Lion], darwin9.0 [Leopard]
			darwin*)
				core_dependency_osFamily=macosx
			;;
		
			# ?
			solaris*)
				core_dependency_osFamily=solaris
			;;
		
			# ?
			# netbsd is known; freebsd et al are guesses
			netbsd|freebsd|openbsd)
				core_dependency_osFamily=bsd
			;;
		
			*)
				core_message WARN "The bash OSTYPE '$OSTYPE' is unsupported"
				core_dependency_osFamily='Unsupported'
			;;
		
		esac
	else
		# https://en.wikipedia.org/wiki/Uname
		# -o is more useful but most BSD derivatives don't support it
		local unameSystem="$(uname -s)"
		case "$unameSystem" in
			
			CYGWIN_*)
			:
			;;
			
			Linux)
				core_dependency_osFamily=linux
			;;
			
			Darwin)
				core_dependency_osFamily=macosx
			;;
			
			SunOS)
				core_dependency_osFamily=solaris
			;;
			
			MINGW*|MSYS_*)
				core_dependency_osFamily=msys
			;;
			
			DragonFly|NetBSD|FreeBSD|*BSD)
				core_dependency_osFamily=bsd
			;;
			
			# Debian/Hurd and Debian/kFreeBSD both use a GNU/Linux user space
			GNU|GNU/kFreeBSD)
				core_dependency_osFamily=linux
			;;
			
			# Last release August 2012
			# Also, support MKS Toolkit, etc - but is it really worth it?
			# And UnxUtils, dead since 2007
			UWIN-*)
				core_dependency_osFamily=Unsupported
			;;
			
			HP-UX)
				core_dependency_osFamily=Unsupported
			;;
			
			AIX)
				core_dependency_osFamily=Unsupported
			;;
			
			OS400)
				core_dependency_osFamily=Unsupported
			;;
			
			OS/390)
				core_dependency_osFamily=Unsupported
			;;
			
			Haiku)
				core_dependency_osFamily=Unsupported
			;;

			QNX)
				core_dependency_osFamily=Unsupported
			;;
			
			NONSTOP_KERNEL)
				core_dependency_osFamily=Unsupported
			;;
			
			# Cray Unicos, MINIX, IRIX, IRIX64, Tru64, Ultrix, SCO, UnixWare, UWIN, SINIX, ReliantUNIX
			sn5176|MINIX|IRIX|IRIX64|OSF|ULTRIX|SCO_SV|UnixWare|Interix|SINIX-*|ReliantUNIX-*)
				core_dependency_osFamily=Obsolete
			;;
	
			*)
				core_dependency_osFamily=Unsupported
			;;
			
		esac
		
		if [ "$core_dependency_osFamily" = 'Obsolete' ]; then
			core_message WARN "The uname system (uname -s) '$unameSystem' is obsolete; it is probable this program will not work"
		elif [ "$core_dependency_osFamily" = 'Unsupported' ]; then
			core_message NOTICE "The uname system (uname -s) '$unameSystem' is unsupported"
		fi
	fi
}

# We need to think about bash 3.1, 3.2, 4.1 and 4.2 support; supporting Mac OS X and msys out-of-the-box is advantageous
core_dependency_ensureWeAreRunningBash4()
{
	if [ "$core_init_shellDetected" = 'bash' ]; then
		if [ "${BASH_VERSINFO[0]}" != "4" ]; then
			# Of major OS vendors, only RHEL 6 / CentOS 6 still use bash 4.1 (which lacks some declare syntax for arrays)
			local errorMessage='You are not using bash 4'
			case "$core_dependency_osFamily" in
				
				msys)
					errorMessage="${errorMessage}. MinGW, git-bash (msysGit / Git for Windows https://msysgit.github.io/) and other MSYS based Windows products ship an obsolete version of bash (which could be upgraded according to this thread http://mingw.5.n7.nabble.com/bash-4-x-for-MSYS-td5605.html). Please use Cygwin instead"
				;;
				
				macosx)
					errorMessage="${errorMessage}. On Mac OS X, install Homebrew (see http://brew.sh/ ) and then  brew install bash ."
				;;
				
			esac
			core_exitError $core_commandLine_exitCode_OSFILE "$errorMessage"
		fi
		if [ "${BASH_VERSINFO[1]}" -lt 2 ]; then
			# Ubuntu 14.04 using 4.3, 12.04 uses 4.2; 10.04 is obsolete in 8 months
			# AIX using 4.2
			# OpenSolaris 11 shipped 4.1
			# RHEL6/CentOS6 shipped 4.1
			# Cygwin using 4.1
			# Mac OS X using 3.2 (still)
			# MinGW uses 3.1 (!)
			core_exitError $core_commandLine_exitCode_OSFILE "You are not using at least bash 4.2"
		fi
	fi
}