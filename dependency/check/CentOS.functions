core_dependency_check_CentOS_checkFunction()
{
	core_dependency_check_releaseFile centos-release CentOS
}
core_functions_register _core_dependency_check_functions core_dependency_check_CentOS_checkFunction

_core_dependency_check_CentOS_parsePackageName()
{
	repositoryName=''
	packageName=''
	IFS='/' read -r repositoryName packageName <<-EOF
		${fullyQualifiedPackageName}
	EOF
	
	if [ -z "$packageName" ]; then
		packageName="$repositoryName"
		repositoryName=''
	fi
}

core_dependency_check_CentOS_extractUnqualifiedPackageName()
{
	local fullyQualifiedPackageName="$1"

	local repositoryName
	local packageName
	_core_dependency_check_CentOS_parsePackageName
	
	printf '%s' "$packageName"
}

core_dependency_requires CentOS sudo yum
core_dependency_check_CentOS_packageManager()
{
	if [ $(core_init_verbosity) -gt 0 ]; then
		local yumVerbosity=""
	else
		local yumVerbosity="--quiet"
	fi

	sudo -p "Please enter your password for sudo to update yum: " yum ${yumVerbosity} makecache
		
	local repositoryName
	local packageName
	local fullyQualifiedPackageName
	local functionName
	for fullyQualifiedPackageName in "$@"
	do
		_core_dependency_check_CentOS_parsePackageName
		if [ -n "$repositoryName" ]; then
			functionName=_core_dependency_check_CentOS_installRepository_${repositoryName}
			if ! core_functions_exists "$functionName"; then
				core_exitError "Package '$packageName' is in an unsupported repository '$repositoryName'"
			else
				${functionName}
			fi
		fi
	
		sudo -p "Please enter your password for sudo to run yum install $packageName: " yum ${yumVerbosity} --assumeyes install "$packageName"
	done
}

core_dependency_requires CentOS rpm grep
_core_dependency_check_CentOS_checkPackageInstalled()
{
	# doesn't work for packages installed by rpm (eg rpmforge)
	#  yum --quiet list installed "$1" 1>/dev/null 2>/dev/null; then
	# might work
	#  yum list | grep "$1"
	
	local packageName="$1"
	rpm -qa | grep -q "^${packageName}-"
}

core_dependency_requires CentOS sudo yum
_core_dependency_check_CentOS_installRepository_epel()
{
	if _core_dependency_check_CentOS_checkPackageInstalled 'epel-release'; then
		return 0
	fi
	
	sudo -p "Please enter your password for sudo to run yum install epel-release: " yum ${yumVerbosity} --assumeyes install epel-release
}

core_dependency_requires CentOS sed uname sudo rpm curl yum
_core_dependency_check_CentOS_installRepository_repoforge()
{
	if _core_dependency_check_CentOS_checkPackageInstalled 'rpmforge-release'; then
		return 0
	fi
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	local temporaryFile="$TMP_FILE"
	
	# We're supposed to use lsb_release -r, but it isn't installed by default on CentOS 6 or 7 (and the install pulls in 156 packages for the redhat-lsb package it's in)
	sed -e 's/release /release./g' -e 's/.* release\.//g' -e 's/ .*$//g' /etc/redhat-release >"$temporaryFile"
	local release
	local garbage
	IFS='.' read -r release garbage <"$temporaryFile"
	
	local downloadUrl="http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.3-1.$release.rf.$(uname -a).rpm"
	
	local repoForgeReleaseRpmFilePath="$temporaryFile"
	
	sudo -p "Please enter your password for sudo to import repoforge repository's key (please note this is only available over _HTTP_): " rpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txt 2>/dev/null || true	
	
	curl --silent --location --url "$downloadUrl" >"$repoForgeReleaseRpmFilePath"
	
	rpm -K "$repoForgeReleaseRpmFilePath" 1>/dev/null 2>/dev/null || core_exitError $core_commandLine_exitCode_IOERR "Downloaded repoforge package corrupt or tampered with"
	
	sudo -p "Please enter your password for sudo to add the repoforge repository" rpm -ivh "$repoForgeReleaseRpmFilePath"

	sudo -p "Please enter your password for sudo to update yum: " yum ${yumVerbosity} makecache
}