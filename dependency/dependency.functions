core_usesIn core functions path compatibility
core_usesIn core/dependency check languagePackageManagers
core_usesIn core/variable array

core_init_defines core_dependency_declares
core_init_defines core_dependency_declaresAsArray
core_init_defines core_dependency_requires
core_init_defines core_dependency_fallback
core_init_defines core_dependency_oneOf

core_dependency_fallback !'*' lsb_release
core_dependency_determinePackageManager()
{
	if core_variable_array_iterateAsCallbacksShortcut _core_dependency_check_functions; then
		return 0
	fi
	
	# Alternatively, we can use /etc/debian_version's presence in a check above
	# Or parse /etc/lsb-release for DISTRIB_ID
	if core_compatibility_whichNoOutput lsb_release; then
		local lsbDistributor="$(lsb_release --id --short)"
		if [ -n "$lsbDistributor" ]; then
			core_dependency_packageManager="$lsbDistributor"
			return 0
		fi
	fi
	
	core_dependency_packageManager='Unknown'
}
core_functions_register _core_dependency_functions core_dependency_determinePackageManager

_core_dependency_addToPackagesToInstallIfRequired()
{
	if core_variable_array_contains packagesToInstall "$pathPackage"; then
		return 0
	fi
	core_variable_array_append packagesToInstall "$pathPackage"
}

_core_dependency_addToReplacementPathIfRequired()
{
	local filePath="$1"
	local folderPath="$(core_compatibility_dirname "$filePath")"
	local replacementPathFragment
	local IFS=':'
	for replacementPathFragment in $replacementPath
	do
		if [ "$replacementPathFragment" = "$folderPath" ]; then
			return 0
		fi
	done
	replacementPath="$folderPath:$replacementPath"
}

_core_dependency_addFromInternalDataSource()
{
	local internalDataSourceName="_core_dependency_internalDataSource_${packageManager}_${programName}"
	
	if core_variable_isUnset "$internalDataSourceName"; then
		foundInternally=0
		return 0
	fi
	foundInternally=1

	local core_variable_indirectValue_result
	core_variable_indirectValue "$internalDataSourceName"
	IFS=' ' read -r pathProgramName pathPackage pathAbsoluteFilePath <<-EOF
		$core_variable_indirectValue_result
	EOF
	
	# We use an existence check. This allows for more complex installatons, eg brew-rmtree, which don't install binaries
	if [ ! -e "$pathAbsoluteFilePath" ]; then
		_core_dependency_addToPackagesToInstallIfRequired
	fi
	_core_dependency_addToReplacementPathIfRequired	"$pathAbsoluteFilePath"
}

_core_dependency_addFromExternalDataSources()
{
	local externalDataSourceFolderPath
	local externalDataSourceFilePath
	
	if core_variable_isSet HOME; then
		set -- \
			"$HOME"/."$_program_name" \
			"$HOME"/."$core_libraryName" \
			"$_program_etcPath"/"$_program_name" \
			"$_program_etcPath"/"$core_libraryName"
	else
		set -- \
			"$_program_etcPath"/"$_program_name" \
			"$_program_etcPath"/"$core_libraryName"
	fi
	
	# First encountered path wins
	for externalDataSourceFolderPath in "$@"
	do
		externalDataSourceFilePath="$externalDataSourceFolderPath"/paths.d/"$packageManager"/"$programName".path
		if ! core_path_isReadableNonEmptyFilePath "$externalDataSourceFilePath"; then
			continue
		fi
		
		IFS=' ' read -r pathProgramName pathPackage pathAbsoluteFilePath <"$externalDataSourceFilePath"
		
		# We use an existence check. This allows for more complex installatons, eg brew-rmtree, which don't install binaries
		if [ ! -e "$pathAbsoluteFilePath" ]; then
			_core_dependency_addToPackagesToInstallIfRequired
		fi
		_core_dependency_addToReplacementPathIfRequired	"$pathAbsoluteFilePath"
		foundInternally=1
		return
	done
}

core_dependency_add()
{
	local pathProgramName
	local pathPackage
	local pathAbsoluteFilePath
	
	local foundInternally=0
	_core_dependency_addFromInternalDataSource
	if [ $foundInternally -eq 0 ]; then
		_core_dependency_addFromExternalDataSources
	fi
	if [ $foundInternally -eq 0 ]; then
		core_message INFO "Dependency '$programName' for packageManager '$packageManager' not in any known .path file (or internally)"
		return 0
	fi
	
	if [ "$(core_compatibility_basename "$pathAbsoluteFilePath")" = "$programName" ]; then
		return 0
	fi
	
	# Make a temporary folder to contain a symlink to this program so names work correctly; add to the path
	if [ -z "$temporaryPathForWeirdlyLinkedFiles" ]; then
		local TMP_FOLDER
		core_temporaryFiles_newFolderToRemoveOnExit
		temporaryPathForWeirdlyLinkedFiles="$TMP_FOLDER"
		replacementPath="$temporaryPathForWeirdlyLinkedFiles:$replacementPath"
	fi
	ln -s "$pathAbsoluteFilePath" "$temporaryPathForWeirdlyLinkedFiles"/"$programName" 
}

# Special bash-ism
command_not_found_handle()
{
	local programNotFound="$1"
	shift 1
	core_exitError $core_commandLine_exitCode_OSFILE "Essential dependency '$programNotFound' not found on the PATH (with arguments $@)"
}

core_dependency_setUpPathAndInstallMissing()
{
	# A standard path, excluding games, but including any sibling binaries to our one
	local replacementPath='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
	_core_dependency_addToReplacementPathIfRequired "$core_init_ourSymlinkPath"
	_core_dependency_addToReplacementPathIfRequired "$core_init_ourPath"
	
	if [ "$core_dependency_packageManager" = 'Unknown' ]; then
		core_message INFO 'Could not determine package manager for your system, located binaries may be incorrect'
	fi
	
	local alreadyHandledProgramNames
	local alreadyHandledProgramNames_initialised
	core_variable_array_initialise alreadyHandledProgramNames
	
	local packagesToInstall
	local packagesToInstall_initialised
	core_variable_array_initialise packagesToInstall
	
	local temporaryPathForWeirdlyLinkedFiles=''
	
	local packageManager
	local programName
	local alreadyInstalledProgramName
	local originalIFS="$IFS"
	local IFS=' '
	while IFS=' ' read -r packageManager programName
	do
		IFS="$originalIFS"
		case "$packageManager" in
			
			'*'|"$core_dependency_packageManager")
				packageManager="$core_dependency_packageManager"
				if core_variable_array_contains alreadyHandledProgramNames "$programName"; then
					continue
				fi
				core_variable_array_append alreadyHandledProgramNames "$programName"
				core_dependency_add
			;;

			# Because of the heredoc, there's an extra blank line. A messy alternative is https://unix.stackexchange.com/questions/102891/posix-compliant-way-to-work-with-a-list-of-filenames-possibly-with-whitespace
			'')
				break
			;;
			
			*)
				continue
			;;
			
		esac
	done <<-EOF
		${_core_dependency_requires}
	EOF
	IFS="$originalIFS"

	if ! core_variable_array_isEmpty packagesToInstall; then
		core_message WARN "Installing missing packages '$(core_variable_array_string packagesToInstall " ")'"
		core_variable_array_passToFunctionAsArguments packagesToInstall core_dependency_check_${core_dependency_packageManager}_packageManager
	fi
	
	# In bash, this cleans the 'hash' of paths (see hash builtin, hash -r)
	export PATH="$replacementPath"
}
core_functions_register _core_dependency_functions core_dependency_setUpPathAndInstallMissing

core_dependency_installDependencies()
{
	if core_variable_isUnset _program_ignore_dependencies; then
		_program_ignore_dependencies=no
	fi
	
	if core_variable_isFalse "$_program_ignore_dependencies"; then
		core_functions_execute _core_dependency_functions "$@"
	fi
}
