core_usesIn core trap
core_usesIn core/variable array
core_usesIn core validate

core_temporaryFiles_initialise()
{
	core_trap_addOnCleanUp core_temporaryFiles_removeAll
	
	# Set a global TMPDIR if unset; an alternative is to create under the HOME folder
	: ${TMPDIR:=/tmp}
	
	core_validate_folderPathReadableAndSearchableAndWritable $core_commandLine_exitCode_CONFIG 'environment variable' 'TMPDIR' "$TMPDIR"
}
core_functions_register core_functions core_temporaryFiles_initialise

core_dependency_requires '*' rm
_core_temporaryFiles_removeAll_callback()
{
	rm -r -f -- "$@"
}

core_temporaryFiles_removeAll()
{
	if core_variable_array_isSet _core_temporaryFiles_filesToRemoveOnExit; then
		core_variable_array_passToFunctionAsArguments _core_temporaryFiles_filesToRemoveOnExit _core_temporaryFiles_removeAll_callback
	fi
}

core_dependency_requires '*' mktemp
core_temporaryFiles_newFileToRemoveOnExit()
{
	local umaskOriginal="$(umask)"
	umask 077
	TMP_FILE="$(mktemp -t "$_program_name".XXXXXXXXXXXX)" || core_exitError $core_commandLine_exitCode_CANTCREAT "Could not create a temporary file"
	core_variable_array_append _core_temporaryFiles_filesToRemoveOnExit "$TMP_FILE"
	umask "$umaskOriginal"
}

core_dependency_requires '*' mktemp
core_temporaryFiles_newFolderToRemoveOnExit()
{
	local umaskOriginal="$(umask)"
	umask 077
	TMP_FOLDER="$(mktemp -d -t "$_program_name".XXXXXXXXXXXX)" || core_exitError $core_commandLine_exitCode_CANTCREAT "Could not create a temporary folder"
	core_variable_array_append _core_temporaryFiles_filesToRemoveOnExit "$TMP_FOLDER"
	umask "$umaskOriginal"
}
