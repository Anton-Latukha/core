# bash forms do not have a \1 restriction
core_variable_array_initialise()
{
	local variableName="$1"
	eval "${variableName}=()"
}

# bash is weird when it comes to checking empty vs undeclared arrays: https://unix.stackexchange.com/questions/56837/how-to-test-if-a-variable-is-defined-at-all-in-bash-prior-to-version-4-2-with-th
# this code is expensive to run; an alternative might be to test that index 0 is set, but this isn't a 100% requirement for bash
core_variable_array_isSet()
{
	declare -a -p
	exit 70
	local variableName="$1"
	local declaration options definition
	local declarationName declarationBody
	while IFS=' ' read -r declaration options definition
	do
		IFS="=" read -r declarationName declarationBody <<<"$definition"
		if [ "$declarationName" = "$variableName" ]; then
			return 0
		fi
	done < <(declare -a -p)
	return 1
}

core_variable_array_isUnset()
{
	! core_variable_array_isSet "$1"
}

core_variable_array_append()
{
	local variableName="$1"
	shift 1
	
	local argument
	for argument in "$@"
	do
		if core_variable_array_isUnset "$variableName"; then
			eval "${variableName}=('$argument')"
		else
			eval "${variableName}+=('$argument')"
		fi
	done
}

core_variable_array_length()
{
	local variableName="$1"
	shift 1
	
	# The 'trick' code only works if the array exists and has a length > 1: declare -a tempArray=${variableName}[@]; printf '%s' ${#tempArray[@]}
	eval "printf '%s' \${#$variableName[@]}"
}

_core_variable_array_isEmpty()
{
	[ $(core_variable_array_length "$variableName") -eq 0 ]
}

# Idea from http://mywiki.wooledge.org/BashFAQ/006
core_variable_array_at()
{
	local variableName="$1"
	local -i index=$2
	local temporary=${variableName}[$index]
	printf -v core_variable_array_element '%s' "${!temporary}"
}

core_variable_array_string()
{
	local variableName="$1"
	local separator="$2"
	
	core_variable_array_string_result=''
	
	if _core_variable_array_isEmpty; then
		return 0
	fi
	
	local count=0
	local core_variable_array_element
	declare -a tempArray=${variableName}[@]
	for core_variable_array_element in "${!tempArray}"
	do
		if [ $count -eq 0 ]; then
			core_variable_array_string_result="$core_variable_array_element"
		else
			core_variable_array_string_result="${core_variable_array_string_result}${separator}${core_variable_array_element}"
			count=$((count+1))
		fi
	done
}

# Does not allow passing any other arguments, though
core_variable_array_passToFunctionAsArguments()
{
	local variableName="$1"
	local function="$2"
	shift 2
	if [ $# -ne 0 ]; then
		core_exitError $core_commandLine_exitCode_SOFTWARE "Only varargs from array are allowed"
	fi
	
	if _core_variable_array_isEmpty; then
		"$function"
		return 0
	fi
	
	declare -a tempArray=${variableName}[@]
	"$function" "${!tempArray}"
}

# Idea from http://mywiki.wooledge.org/BashFAQ/006
core_variable_array_iterate()
{
	local variableName="$1"
	local callback="$2"
	shift 2
	
	if _core_variable_array_isEmpty; then
		return 0
	fi
	
	local core_variable_array_element
	declare -a tempArray=${variableName}[@]
	for core_variable_array_element in "${!tempArray}"
	do
		$callback "$@"
	done
}

core_variable_array_iterateAsCallbacks()
{
	local variableName="$1"
	shift 1
	
	if _core_variable_array_isEmpty; then
		return 0
	fi
	
	local callback
	declare -a tempArray=${variableName}[@]
	for callback in "${!tempArray}"
	do
		"$callback" "$@"
	done
}

core_variable_array_iterateAsCallbacksShortcut()
{
	local variableName="$1"
	shift 1
	
	if _core_variable_array_isEmpty; then
		return 1
	fi
	
	local callback
	declare -a tempArray=${variableName}[@]
	for callback in "${!tempArray}"
	do
		if $callback "$@"; then
			return 0
		fi
	done
	return 1
}

core_variable_array_iterateShortcut()
{
	local variableName="$1"
	local callback="$2"
	shift 2
	
	if _core_variable_array_isEmpty; then
		return 1
	fi
	
	local core_variable_array_element
	tempArray=${variableName}[@]
	for core_variable_array_element in "${!tempArray}"
	do
		if $callback "$@"; then
			return 0
		fi
	done
	return 1
}
