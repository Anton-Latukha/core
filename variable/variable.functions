core_init_defines core_variable_isSet
core_init_defines core_variable_isUnset
core_init_defines core_variable_indirectValue

core_variable_setVariable()
{
	eval "$1"'=$2'
}

core_variable_setVariableIfUnset()
{
	local variableName="$1"
	local variableDefaultValue="$2"
	
	# This is not whitespace-safe: eval "$variableName=\"\${$variableName-$variableDefaultValue}\""
	if core_variable_isUnset "$variableName"; then
		eval "$variableName='$variableDefaultValue'"
	fi
}

#if core_variable_startsWith "/etc/path/to/file" "/home/"; then
#	echo 'yes'
#fi
core_variable_startsWith()
{
	[ "${1#${2}}" != "$1" ]
}

core_variable_doesNotStartWith()
{
	[ "${1#${2}}" = "$1" ]
}

#if core_variable_endsWith "/etc/path/to/file" "/file"; then
#	echo 'yes'
#fi
core_variable_endsWith()
{
	[ "${1%${2}}" != "$1" ]
}

core_variable_doesNotEndWith()
{
	[ "${1%${2}}" = "$1" ]
}

core_variable_firstCharacter()
{
	local value="$1"
	local suffix="${value#?}"
	printf '%s' "${value%$suffix}"
}

core_value_lastCharacter()
{
	local value="$1"
	local prefix="${value%?}"
	printf '%s' "${value#$prefix}"
}

_core_variable_copy()
{
	local valueToCopy="$1"
	local copies=$2
	
	local count=0
	while [ $count -lt $copies ]
	do
		copy="${copy}${valueToCopy}"
		count=$((count + 1))
	done
}

core_variable_allButLastN()
{
	local value="$1"
	local numberToOmit=$2
	
	local length=${#value}
	local endLength=$((length - numberToOmit))
	if [ $endLength -lt 1 ]; then
		return
	fi
	
	local count=0
	local match=''
	local copy
	_core_variable_copy '?' $endLength
	
	local suffix="${value#$copy}"
	printf '%s' "${value%$suffix}"
}

core_variable_allButLast()
{
	core_variable_allButLastN "$1" 1
}

core_variable_allButFirstN()
{
	local value="$1"
	local numberToOmit=$2
	
	local length=${#value}
	local endLength=$((length - numberToOmit))
	if [ $endLength -lt 1 ]; then
		return
	fi
	
	local count=0
	local match=''
	local copy
	_core_variable_copy '?' $endLength
	
	local prefix="${value%$copy}"
	printf '%s' "${value#$prefix}"
}

core_variable_allButFirst()
{
	core_variable_allButFirstN "$1" 1
}

core_variable_isTrue()
{
	_core_variable_parseBoolean "$1" 0 1 2
}

core_variable_isFalse()
{
	_core_variable_parseBoolean "$1" 1 0 2
}

core_variable_isInvalidBoolean()
{
	_core_variable_parseBoolean "$1" 1 1 0
}

_core_variable_parseBoolean()
{
	case "$1" in
		
		true|True|TRUE|T|yes|Yes|YES|Y|on|On|ON|1)
			return $2
		;;
		
		false|False|FALSE|F|no|No|NO|N|off|Off|OFF|0)
			return $3
		;;
		
		*)
			return $4
		;;
		
	esac
}
